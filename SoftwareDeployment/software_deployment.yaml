heat_template_version: 2015-10-15

description: >
   This HEAT template demonstrates the creation of an instances and uses the
   OS::Heat::SoftwareConfig and OS::Heat::SoftwareDeployment resources to
   deploy software using os-collect-config tools. The template takes a vanilla
   OS deployment and automatically installs and configures os-collect-config
   in preparation for connecting to the HEAT engine.

parameters:
  key_name:
    type: string
    description: SSH Key Pair
    constraints:
      - custom_constraint: nova.keypair
  flavor:
    type: string
    description: Flavor to use for the migration server
    default: t1.small
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    description: Select vCloudTransfer for a CentOS instance with ovftool installed
    default: "vCloudTransfer"
    constraints:
      - custom_constraint: glance.image
  network:
    type: string
    description: Name of the network to create the VM on
    default: Internal
    constraints:
      - custom_constraint: neutron.network

resources:
  ssh_ext_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 22
          port_range_max: 22
        - protocol: icmp
          remote_ip_prefix: 0.0.0.0/0

  server:
    type: OS::Nova::Server
    properties:
      name: deploydemo
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      networks:
        - network: { get_param: network }
      security_groups:
        - { get_resource: ssh_ext_secgroup }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_attr: [config_agent, config] }

  # Install, configure and enable the Heat configuration agent
  config_agent:
    type: resources/collect-config-setup/install_config_agent_centos_yum.yaml

  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: firstname
      - name: lastname
      outputs:
      - name: result
      config: { get_file: 'files/deploy.sh' }

  deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server
      input_values:
        firstname: Demo
        lastname: User

outputs:
  result:
    value:
      get_attr: [deployment, result]
  stdout:
    value:
      get_attr: [deployment, deploy_stdout]
  stderr:
    value:
      get_attr: [deployment, deploy_stderr]
  status_code:
    value:
      get_attr: [deployment, deploy_status_code]